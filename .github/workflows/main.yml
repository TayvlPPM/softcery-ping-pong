name: Docker Build and Push

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: ping-pong-production-ecr
  ECS_CLUSTER: ping-pong-production-cluster
  ECS_SERVICE: ping-pong-production-ecs-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx cache
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR password (temporary)
        id: get-ecr-password
        run: echo "::set-output name=password::$(aws ecr get-login-password)"
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
         # cache-from: type=gha,scope=repository,keys=my-builder-cache-{{ runner.os }}-{{ env.GITHUB_SHA }}
         # cache-to: type=gha,scope=repository,keys=my-builder-cache-{{ runner.os }}-{{ env.GITHUB_SHA }}
         # builder: my-builder
          provenance: false
          registry: ${{ steps.login-ecr.outputs.registry }}
          repository: ${{ env.ECR_REPOSITORY}}
          username: AWS  # temporary
          password: ${{ steps.get-ecr-password.outputs.password }}  # temporary

      - name: Force deployment
        run: |
          aws ecs update-service --cluster ${{env.ECS_CLUSTER}} --service ${{env.ECS_SERVICE}} --force-new-deployment
        id: deploy-ecs
      
      - name: Check deployment status
        run: |
          if [ "${{ steps.deploy-ecs.outputs.deployment-status }}" != "SUCCESS" ]; then
            echo "Deployment failed: ${{ steps.deploy-ecs.outputs.deployment-status-reason }}"
            exit 1
          fi
